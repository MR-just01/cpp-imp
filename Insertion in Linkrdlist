#include <iostream>
using namespace std;

struct node {
    int data;
    node* next;
};

node* head = NULL;

// Function to insert at the start
void insert(int n) {
    node* newnode = new node(); // allocate memory
    newnode->data = n;          // assign value
    newnode->next = head;       // point to old head
    head = newnode;             // update head
}

// Function to print the linked list
void print() {
    cout << "Data elements stored in linked list are: ";
    node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    insert(4);
    insert(7);
    insert(10);

    print(); 

    return 0;
}




##INSERTION AT THE END 

#include <iostream>
using namespace std;

struct node {
    int data;
    node* next;
};

node* head = NULL;

// Function to insert at the start
void insert(int n) {
    node* newnode = new node(); // allocate memory
    newnode->data = n;          // assign value
    newnode->next = head;       // point to old head
    head = newnode;             // update head
}

void insertatend(int n ){
  node* newnode = new node();   
  newnode->data = n;
  newnode->next = NULL;   
  if(head == NULL){
    cout<<"linked list is empty";
    head = newnode;
  }
  node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
  temp->next = newnode;
}

// print the linked list
void print() {
    cout << "Data elements stored in linked list are: ";
    node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    insert(4);
    insert(7);
    insert(10);
    insert(3);
    insert(5);
    insert(8);
    insertatend(1);
    print(); 

    return 0;
}

##INSERTION AT THE SPECIFIC POSITION

#include<iostream>
using namespace std;

struct node
{
    int data;
    node*next;
};
node *head ; 
void insert(int n ){
    node*newnode = new node;
    newnode ->data = n;
    newnode -> next = head;
    head = newnode;

}

void insertionatend(int n ){
    node*newnode = new node;
    newnode ->data = n;
    newnode -> next = NULL;
    if(head == NULL){
        head = newnode;
    }
    node*temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
     }
     temp->next =newnode;
    
}


void insertatspecific(int pos , int n ){
    node*newnode = new node;
    newnode->data = n;
    if(pos == 1){
        newnode ->next = head;
        head = newnode;
    }
  node*temp = head;
  for(int i=1 ; i<pos-1 && temp!=NULL ; i++){
    temp = temp->next;
  }
  if(temp == NULL){
    cout<<"user entered the invalid position"<<endl;
  }
  newnode->next = temp->next;
  temp->next = newnode;

}

void print(){
    node* temp = head;
    cout<<"data elements in the array::";
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
    
}

int main(){
    insert(2);
    insert(4);
    insert(3);
    insert(7);
    insertionatend(23);
    insertatspecific(4 , 65);

    print();
}





